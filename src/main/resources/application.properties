# Default database configuration
quarkus.datasource.db-kind=mysql
quarkus.datasource.username=wallet
quarkus.datasource.password=wallet
quarkus.datasource.reactive.url=mysql://localhost:3306/wallet

# Additional named datasources
quarkus.datasource.write.db-kind=mysql
quarkus.datasource.write.username=wallet
quarkus.datasource.write.password=wallet
quarkus.datasource.write.reactive.url=mysql://localhost:3306/wallet

quarkus.datasource.read.db-kind=mysql
quarkus.datasource.read.username=wallet
quarkus.datasource.read.password=wallet
quarkus.datasource.read.reactive.url=mysql://localhost:3307/wallet

# Hibernate configuration
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=true

# Redis configuration
quarkus.redis.hosts=redis://localhost:6379
quarkus.redis.timeout=10s
quarkus.redis.max-pool-size=20
quarkus.redis.max-pool-waiting=20

# Kafka configuration
kafka.bootstrap.servers=localhost:9092
kafka.schema.registry.url=http://localhost:8081

# Disable Dev Services (we have our own infrastructure)
quarkus.devservices.enabled=false

# Event producer configuration (ENABLED for event sourcing)
mp.messaging.outgoing.wallet-events.connector=smallrye-kafka
mp.messaging.outgoing.wallet-events.topic=wallet-events
mp.messaging.outgoing.wallet-events.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.wallet-events.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.wallet-events.acks=all
mp.messaging.outgoing.wallet-events.retries=3
mp.messaging.outgoing.wallet-events.delivery.timeout.ms=120000
mp.messaging.outgoing.wallet-events.enable.idempotence=true
mp.messaging.outgoing.wallet-events.transaction.id.prefix=wallet-events-
# Auto-create topics
mp.messaging.outgoing.wallet-events.auto-create-topics=true

# ============================================================================
# TIMEOUT CONFIGURATION - Prevent hanging operations
# Database operations - Prevent connection pool exhaustion
smallrye.faulttolerance."database-operations".timeout.value=5000

# Redis operations - Cache should be fast, fail fast if slow
smallrye.faulttolerance."redis-operations".timeout.value=1000

# Kafka operations - Don't block business operations
smallrye.faulttolerance."kafka-operations".timeout.value=3000

# RETRY STRATEGIES CONFIGURATION - Financial Service Optimized
# ============================================================================

# Optimistic Lock Retry Configuration (for concurrent balance updates)
smallrye.faulttolerance."optimistic-lock-retry".retry.maxRetries=5
smallrye.faulttolerance."optimistic-lock-retry".retry.delay=100
smallrye.faulttolerance."optimistic-lock-retry".retry.maxDuration=2000
smallrye.faulttolerance."optimistic-lock-retry".retry.jitter=50
smallrye.faulttolerance."optimistic-lock-retry".retry.retryOn=org.hibernate.StaleObjectStateException,jakarta.persistence.OptimisticLockException,org.hibernate.exception.LockAcquisitionException

# Database Transient Failure Retry Configuration
smallrye.faulttolerance."database-transient-retry".retry.maxRetries=3
smallrye.faulttolerance."database-transient-retry".retry.delay=500
smallrye.faulttolerance."database-transient-retry".retry.maxDuration=5000
smallrye.faulttolerance."database-transient-retry".retry.jitter=200
smallrye.faulttolerance."database-transient-retry".retry.retryOn=java.sql.SQLException,java.sql.SQLTransientException,java.net.ConnectException,java.util.concurrent.TimeoutException

# Kafka Publishing Retry Configuration
smallrye.faulttolerance."kafka-publish-retry".retry.maxRetries=3
smallrye.faulttolerance."kafka-publish-retry".retry.delay=1000
smallrye.faulttolerance."kafka-publish-retry".retry.maxDuration=10000
smallrye.faulttolerance."kafka-publish-retry".retry.jitter=500
smallrye.faulttolerance."kafka-publish-retry".retry.retryOn=org.apache.kafka.common.errors.RetriableException,org.apache.kafka.common.errors.TimeoutException,org.apache.kafka.common.errors.NetworkException

# External Service Retry Configuration (for future integrations)
smallrye.faulttolerance."external-service-retry".retry.maxRetries=2
smallrye.faulttolerance."external-service-retry".retry.delay=2000
smallrye.faulttolerance."external-service-retry".retry.maxDuration=15000
smallrye.faulttolerance."external-service-retry".retry.jitter=1000
smallrye.faulttolerance."external-service-retry".retry.retryOn=java.net.ConnectException,java.net.SocketTimeoutException,java.io.IOException

# Event consumer configuration (disabled for now - focusing on command side)
# mp.messaging.incoming.wallet-events.connector=smallrye-kafka
# mp.messaging.incoming.wallet-events.topic=wallet-events
# mp.messaging.incoming.wallet-events.value.deserializer=io.quarkus.kafka.client.serialization.ObjectMapperDeserializer

# Circuit Breaker Configuration - Financial Service Optimized
# Database Primary Circuit Breaker (Critical for write operations)
smallrye.faulttolerance."aurora-primary".circuitbreaker.requestVolumeThreshold=10
smallrye.faulttolerance."aurora-primary".circuitbreaker.failureRatio=0.5
smallrye.faulttolerance."aurora-primary".circuitbreaker.delay=30000
smallrye.faulttolerance."aurora-primary".circuitbreaker.successThreshold=3

# Database Replica Circuit Breaker (Less critical, faster recovery)
smallrye.faulttolerance."aurora-replica".circuitbreaker.requestVolumeThreshold=8
smallrye.faulttolerance."aurora-replica".circuitbreaker.failureRatio=0.6
smallrye.faulttolerance."aurora-replica".circuitbreaker.delay=15000
smallrye.faulttolerance."aurora-replica".circuitbreaker.successThreshold=2

# Redis Cache Circuit Breaker (Performance optimization, not critical)
smallrye.faulttolerance."redis-cache".circuitbreaker.requestVolumeThreshold=5
smallrye.faulttolerance."redis-cache".circuitbreaker.failureRatio=0.6
smallrye.faulttolerance."redis-cache".circuitbreaker.delay=10000
smallrye.faulttolerance."redis-cache".circuitbreaker.successThreshold=2

# Kafka Events Circuit Breaker (Audit trail - conservative settings)
smallrye.faulttolerance."kafka-events".circuitbreaker.requestVolumeThreshold=8
smallrye.faulttolerance."kafka-events".circuitbreaker.failureRatio=0.4
smallrye.faulttolerance."kafka-events".circuitbreaker.delay=60000
smallrye.faulttolerance."kafka-events".circuitbreaker.successThreshold=3
# mp.messaging.incoming.wallet-events.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.wallet-events.auto.offset.reset=earliest
# mp.messaging.incoming.wallet-events.enable.auto.commit=false
# mp.messaging.incoming.wallet-events.isolation.level=read_committed
# mp.messaging.incoming.wallet-events.broadcast=true
# mp.messaging.incoming.wallet-events.failure-strategy=retry
# mp.messaging.incoming.wallet-events.retry-attempts=3
# mp.messaging.incoming.wallet-events.retry-max-wait=1s

# Snapshot producer configuration (disabled for create wallet focus)
# mp.messaging.outgoing.wallet-snapshots.connector=smallrye-kafka
# mp.messaging.outgoing.wallet-snapshots.topic=wallet-snapshots
# mp.messaging.outgoing.wallet-snapshots.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
# mp.messaging.outgoing.wallet-snapshots.key.serializer=org.apache.kafka.common.serialization.StringSerializer
# mp.messaging.outgoing.wallet-snapshots.acks=all
# mp.messaging.outgoing.wallet-snapshots.retries=3
# mp.messaging.outgoing.wallet-snapshots.enable.idempotence=true

# Snapshot consumer configuration (disabled for now - focusing on command side)
# mp.messaging.incoming.wallet-snapshots.connector=smallrye-kafka
# mp.messaging.incoming.wallet-snapshots.topic=wallet-snapshots
# mp.messaging.incoming.wallet-snapshots.value.deserializer=io.quarkus.kafka.client.serialization.ObjectMapperDeserializer
# mp.messaging.incoming.wallet-snapshots.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.wallet-snapshots.auto.offset.reset=earliest
# mp.messaging.incoming.wallet-snapshots.enable.auto.commit=false

# OpenAPI configuration
quarkus.smallrye-openapi.info-title=Wallet Service API
quarkus.smallrye-openapi.info-version=1.0.0
quarkus.smallrye-openapi.info-description=A comprehensive digital wallet service for managing user funds, deposits, withdrawals, and transfers with CQRS architecture and event sourcing
quarkus.smallrye-openapi.info-contact-name=Wallet Service Team
quarkus.smallrye-openapi.info-contact-email=wallet-team@example.com
quarkus.smallrye-openapi.info-license-name=Apache 2.0
quarkus.smallrye-openapi.info-license-url=https://www.apache.org/licenses/LICENSE-2.0.html
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.title=Wallet Service API Documentation
quarkus.swagger-ui.theme=flattop

# Metrics configuration
quarkus.micrometer.export.prometheus.path=/metrics
quarkus.micrometer.binder.kafka.enabled=true
quarkus.micrometer.binder.redis.enabled=true
quarkus.micrometer.binder.jvm=true
quarkus.micrometer.binder.system=true

# Health check configuration
quarkus.health.extensions.enabled=true
quarkus.health.openapi.included=true



# Logging configuration
quarkus.log.level=INFO
quarkus.log.category."com.wallet".level=DEBUG
quarkus.log.category."org.apache.kafka".level=WARN
quarkus.log.category."org.hibernate".level=WARN

# Connection pool and timeout configurations for better reliability
quarkus.datasource.reactive.max-size=20
quarkus.datasource.reactive.idle-timeout=PT10M
quarkus.datasource.write.reactive.max-size=20
quarkus.datasource.write.reactive.idle-timeout=PT10M
quarkus.datasource.read.reactive.max-size=20
quarkus.datasource.read.reactive.idle-timeout=PT10M