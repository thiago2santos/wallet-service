package com.wallet.security;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import jakarta.enterprise.context.ApplicationScoped;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Base64;
import java.util.Date;
import java.util.Set;

/**
 * JWT Token Generator for testing and development purposes.
 * 
 * In production, tokens would be generated by an external identity provider.
 * This class is used for testing the authentication/authorization implementation.
 */
@ApplicationScoped
public class JwtTokenGenerator {

    @ConfigProperty(name = "mp.jwt.verify.issuer")
    String issuer;

    @ConfigProperty(name = "mp.jwt.verify.audiences")
    String audience;

    /**
     * Generate a JWT token for testing purposes.
     * 
     * @param userId The user ID
     * @param roles The user roles
     * @param groups The user groups (optional)
     * @return JWT token string
     */
    public String generateToken(String userId, Set<String> roles, Set<String> groups) {
        try {
            PrivateKey privateKey = loadPrivateKey();
            
            Instant now = Instant.now();
            Instant expiry = now.plus(1, ChronoUnit.HOURS); // 1 hour expiry as per docs
            
            return Jwts.builder()
                    .setIssuer(issuer)
                    .setAudience(audience)
                    .setSubject(userId)
                    .setIssuedAt(Date.from(now))
                    .setExpiration(Date.from(expiry))
                    .claim("preferred_username", userId)
                    .claim("groups", groups)
                    .claim("roles", roles)
                    .signWith(privateKey, SignatureAlgorithm.RS256)
                    .compact();
        } catch (Exception e) {
            throw new RuntimeException("Failed to generate JWT token", e);
        }
    }

    /**
     * Generate a token for a user with user role.
     */
    public String generateUserToken(String userId) {
        return generateToken(userId, Set.of(SecurityConfig.USER_ROLE), Set.of("users"));
    }

    /**
     * Generate a token for an admin user.
     */
    public String generateAdminToken(String userId) {
        return generateToken(userId, Set.of(SecurityConfig.ADMIN_ROLE), Set.of("admins"));
    }

    private PrivateKey loadPrivateKey() throws Exception {
        try (InputStream is = getClass().getClassLoader()
                .getResourceAsStream("META-INF/resources/privateKey.pem")) {
            
            if (is == null) {
                throw new RuntimeException("Private key file not found");
            }
            
            String privateKeyContent = new String(is.readAllBytes(), StandardCharsets.UTF_8)
                    .replace("-----BEGIN PRIVATE KEY-----", "")
                    .replace("-----END PRIVATE KEY-----", "")
                    .replace("-----BEGIN RSA PRIVATE KEY-----", "")
                    .replace("-----END RSA PRIVATE KEY-----", "")
                    .replaceAll("\\s", "");
            
            byte[] keyBytes = Base64.getDecoder().decode(privateKeyContent);
            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            
            return keyFactory.generatePrivate(keySpec);
        }
    }
}
