# Wallet Service Application Deployment
apiVersion: v1
kind: Service
metadata:
  name: wallet-service
  namespace: wallet-service
  labels:
    app: wallet-service
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30808
    name: http
  selector:
    app: wallet-service

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wallet-service
  namespace: wallet-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wallet-service
  template:
    metadata:
      labels:
        app: wallet-service
    spec:
      containers:
      - name: wallet-service
        image: wallet-service:final-working
        imagePullPolicy: Never  # Use local image from Minikube
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: QUARKUS_PROFILE
          value: "k8s"
        - name: QUARKUS_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: wallet-secrets
              key: MYSQL_USER
        - name: QUARKUS_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wallet-secrets
              key: MYSQL_PASSWORD
        - name: QUARKUS_DATASOURCE_WRITE_USERNAME
          valueFrom:
            secretKeyRef:
              name: wallet-secrets
              key: MYSQL_USER
        - name: QUARKUS_DATASOURCE_WRITE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wallet-secrets
              key: MYSQL_PASSWORD
        - name: QUARKUS_DATASOURCE_READ_USERNAME
          valueFrom:
            secretKeyRef:
              name: wallet-secrets
              key: MYSQL_USER
        - name: QUARKUS_DATASOURCE_READ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: wallet-secrets
              key: MYSQL_PASSWORD
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka:9092"
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: "http://schema-registry:8081"
        - name: QUARKUS_REDIS_HOSTS
          value: "redis://redis:6379"
        livenessProbe:
          httpGet:
            path: /q/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /q/health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: app-config
          mountPath: /deployments/config
          readOnly: true
      volumes:
      - name: app-config
        configMap:
          name: wallet-app-config
      restartPolicy: Always

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wallet-app-config
  namespace: wallet-service
data:
  application.properties: |
    # Kubernetes-specific overrides
    quarkus.profile=k8s
    
    # Database configuration
    quarkus.datasource.reactive.url=mysql://mysql-primary:3306/wallet
    quarkus.datasource.write.reactive.url=mysql://mysql-primary:3306/wallet
    quarkus.datasource.read.reactive.url=mysql://mysql-replica:3306/wallet
    
    # Redis configuration
    quarkus.redis.hosts=redis://redis:6379
    
    # Kafka configuration
    kafka.bootstrap.servers=kafka:9092
    kafka.schema.registry.url=http://schema-registry:8081
    
    # Logging
    quarkus.log.console.enable=true
    quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
    
    # Health checks
    quarkus.health.extensions.enabled=true
    
    # Metrics
    quarkus.micrometer.export.prometheus.path=/q/metrics

---
# Horizontal Pod Autoscaler for wallet service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: wallet-service-hpa
  namespace: wallet-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wallet-service
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
