version: '3.8'

# Optimized Docker Compose for Load Testing
# This configuration focuses on performance testing with containerized wallet service

networks:
  loadtest-network:
    driver: bridge

volumes:
  mysql-loadtest-data:
  redis-loadtest-data:
  prometheus-loadtest-data:
  grafana-loadtest-data:

services:
  # Optimized MySQL for load testing
  mysql-loadtest:
    image: mysql:8.0
    container_name: wallet-mysql-loadtest
    restart: unless-stopped
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=1G
      --innodb-log-file-size=256M
      --innodb-flush-log-at-trx-commit=2
      --innodb-flush-method=O_DIRECT
      --max-connections=1000
      --thread-cache-size=50
      --table-open-cache=4000
      --query-cache-type=1
      --query-cache-size=256M
      --tmp-table-size=256M
      --max-heap-table-size=256M
      --key-buffer-size=256M
      --read-buffer-size=2M
      --read-rnd-buffer-size=16M
      --bulk-insert-buffer-size=64M
      --myisam-sort-buffer-size=128M
      --innodb-thread-concurrency=0
      --innodb-read-io-threads=8
      --innodb-write-io-threads=8
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wallet
      MYSQL_USER: wallet
      MYSQL_PASSWORD: wallet
    ports:
      - "3306:3306"
    volumes:
      - mysql-loadtest-data:/var/lib/mysql
      - ./mysql/primary:/docker-entrypoint-initdb.d
    networks:
      - loadtest-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "wallet", "-pwallet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Resource limits for consistent performance
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Optimized Redis for load testing
  redis-loadtest:
    image: redis:7.0-alpine
    container_name: wallet-redis-loadtest
    restart: unless-stopped
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
      --databases 1
      --save ""
    ports:
      - "6379:6379"
    volumes:
      - redis-loadtest-data:/data
    networks:
      - loadtest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'

  # Wallet Service - Optimized for Load Testing
  wallet-service:
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: wallet-service-loadtest
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "5005:5005"  # Debug port
    environment:
      # Database connections
      QUARKUS_DATASOURCE_REACTIVE_URL: mysql://mysql-loadtest:3306/wallet
      QUARKUS_DATASOURCE_WRITE_REACTIVE_URL: mysql://mysql-loadtest:3306/wallet
      QUARKUS_DATASOURCE_READ_REACTIVE_URL: mysql://mysql-loadtest:3306/wallet
      
      # Redis connection
      QUARKUS_REDIS_HOSTS: redis://redis-loadtest:6379
      
      # Optimized connection pools for high load
      QUARKUS_DATASOURCE_REACTIVE_MAX_SIZE: 50
      QUARKUS_DATASOURCE_WRITE_REACTIVE_MAX_SIZE: 50
      QUARKUS_DATASOURCE_READ_REACTIVE_MAX_SIZE: 50
      QUARKUS_REDIS_MAX_POOL_SIZE: 50
      QUARKUS_REDIS_MAX_POOL_WAITING: 50
      
      # JVM optimizations for load testing
      JAVA_OPTS_APPEND: >
        -Dquarkus.http.host=0.0.0.0
        -Djava.util.logging.manager=org.jboss.logmanager.LogManager
        -XX:+UseG1GC
        -XX:MaxGCPauseMillis=200
        -XX:+UnlockExperimentalVMOptions
        -XX:+UseJVMCICompiler
        -XX:+PrintGC
        -XX:+PrintGCDetails
        -XX:+PrintGCTimeStamps
        -Xms2g
        -Xmx4g
        -XX:MetaspaceSize=256m
        -XX:MaxMetaspaceSize=512m
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/tmp/heapdump.hprof
      
      # Quarkus HTTP optimizations
      QUARKUS_HTTP_IO_THREADS: 8
      QUARKUS_HTTP_WORKER_THREADS: 200
      QUARKUS_HTTP_MAX_BODY_SIZE: 10M
      
      # Logging level for load testing
      QUARKUS_LOG_LEVEL: WARN
      QUARKUS_LOG_CATEGORY_COM_WALLET_LEVEL: INFO
      
    networks:
      - loadtest-network
    depends_on:
      mysql-loadtest:
        condition: service_healthy
      redis-loadtest:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits for consistent performance
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '2.0'

  # Prometheus for monitoring during load tests
  prometheus-loadtest:
    image: prom/prometheus:v2.45.0
    container_name: wallet-prometheus-loadtest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-loadtest-data:/prometheus
    networks:
      - loadtest-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'

  # Grafana for real-time monitoring during load tests
  grafana-loadtest:
    image: grafana/grafana:10.0.3
    container_name: wallet-grafana-loadtest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-loadtest-data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards/wallet-service:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - loadtest-network
    depends_on:
      - prometheus-loadtest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana-loadtest:3000/
      - GF_LOG_FILTERS=rendering:debug
