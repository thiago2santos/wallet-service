name: 🧪 PR Unit Tests

on:
  pull_request:
    branches: [ develop ]
  push:
    branches-ignore: [ main, develop ]
    # This triggers on pushes to feature branches that have PRs open to develop

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔧 Make Maven Wrapper Executable
      run: chmod +x ./mvnw
    
    - name: 🧪 Run Unit Tests
      run: ./mvnw clean test -B
    
    - name: 📊 Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 🧪 Unit Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: true
    
    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 7
    
    - name: 📊 Comment Test Results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && (success() || failure())
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results
          let testSummary = '## 🧪 Unit Test Results\n\n';
          
          try {
            const reportsDir = 'target/surefire-reports';
            const files = fs.readdirSync(reportsDir).filter(f => f.startsWith('TEST-') && f.endsWith('.xml'));
            
            let totalTests = 0;
            let totalFailures = 0;
            let totalErrors = 0;
            
            for (const file of files) {
              const content = fs.readFileSync(path.join(reportsDir, file), 'utf8');
              const testsMatch = content.match(/tests="(\d+)"/);
              const failuresMatch = content.match(/failures="(\d+)"/);
              const errorsMatch = content.match(/errors="(\d+)"/);
              
              if (testsMatch) totalTests += parseInt(testsMatch[1]);
              if (failuresMatch) totalFailures += parseInt(failuresMatch[1]);
              if (errorsMatch) totalErrors += parseInt(errorsMatch[1]);
            }
            
            const passed = totalTests - totalFailures - totalErrors;
            const status = (totalFailures + totalErrors) === 0 ? '✅' : '❌';
            
            testSummary += `${status} **Tests:** ${totalTests} total, ${passed} passed, ${totalFailures} failed, ${totalErrors} errors\n\n`;
            
            if (totalFailures + totalErrors === 0) {
              testSummary += '🎉 All tests passed! Great work!\n';
            } else {
              testSummary += '⚠️ Some tests failed. Please check the details above.\n';
            }
            
          } catch (error) {
            testSummary += '❌ Could not parse test results\n';
          }
          
          testSummary += '\n📊 [View detailed test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
          
          // Find existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🧪 Unit Test Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: testSummary
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: testSummary
            });
          }
