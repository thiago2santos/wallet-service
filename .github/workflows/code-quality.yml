name: 🔍 Code Quality & Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2048m -XX:+EnableDynamicAgentLoading'

jobs:
  # 🧪 Unit Tests & Basic Quality
  unit-tests:
    name: 🧪 Unit Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🧪 Run Unit Tests
      run: ./mvnw clean test -B
    
    - name: 📊 Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 🧪 Unit Test Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: unit-tests
        fail_ci_if_error: false

  # 🔍 Static Analysis
  static-analysis:
    name: 🔍 Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🎨 Checkstyle Analysis
      run: ./mvnw checkstyle:check -B
      continue-on-error: true
    
    - name: 🔍 PMD Analysis
      run: ./mvnw pmd:check -B
      continue-on-error: true
    
    - name: 📊 Upload PMD Results
      uses: jwgmeligmeyling/pmd-github-action@master
      if: always()
      with:
        path: target/pmd.xml
    
    - name: 🔍 SpotBugs Analysis
      run: ./mvnw compile spotbugs:check -B
      continue-on-error: true

  # 🧬 Mutation Testing
  mutation-testing:
    name: 🧬 Mutation Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🧬 Run Mutation Tests
      run: ./mvnw org.pitest:pitest-maven:mutationCoverage -B
      continue-on-error: true
    
    - name: 📊 Upload Mutation Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mutation-testing-report
        path: target/pit-reports/
        retention-days: 30
    
    - name: 📈 Comment Mutation Results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('target/pit-reports/index.html', 'utf8');
            const mutationMatch = report.match(/(\d+)% <div class="coverage_bar"><div class="coverage_complete width-\d+"><\/div><div class="coverage_legend">(\d+)\/(\d+)<\/div>/);
            if (mutationMatch) {
              const [, percentage, killed, total] = mutationMatch;
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🧬 Mutation Testing Results\n\n**Coverage:** ${percentage}% (${killed}/${total} mutations killed)\n\n📊 [View detailed report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              });
            }
          } catch (error) {
            console.log('Could not read mutation report:', error.message);
          }

  # 🔒 Security Analysis
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔒 OWASP Dependency Check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=7 \
          -DsuppressionsLocation=owasp-suppressions.xml
      continue-on-error: true
    
    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: target/dependency-check-report.html
        retention-days: 30
    
    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: java
    
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # 🐳 Integration Tests
  integration-tests:
    name: 🐳 Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wallet_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🐳 Start Services
      run: docker-compose up -d mysql-primary mysql-replica kafka zookeeper redis
    
    - name: ⏳ Wait for Services
      run: |
        timeout 60 bash -c 'until docker-compose exec -T mysql-primary mysqladmin ping -h localhost --silent; do sleep 2; done'
        timeout 60 bash -c 'until docker-compose exec -T kafka kafka-topics --bootstrap-server localhost:9092 --list; do sleep 2; done'
    
    - name: 🧪 Run Integration Tests
      run: ./mvnw verify -B -DskipITs=false
      env:
        QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://localhost:3306/wallet_test
        QUARKUS_DATASOURCE_USERNAME: root
        QUARKUS_DATASOURCE_PASSWORD: root
    
    - name: 📊 Upload Integration Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 🐳 Integration Test Results
        path: target/failsafe-reports/*.xml
        reporter: java-junit
    
    - name: 🧹 Cleanup
      if: always()
      run: docker-compose down -v

  # ☁️ SonarCloud Analysis
  sonarcloud:
    name: ☁️ SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, static-analysis]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔍 Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: ☁️ SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./mvnw clean verify sonar:sonar \
          -Dsonar.projectKey=wallet-service \
          -Dsonar.organization=your-org \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # 📊 Quality Gate
  quality-gate:
    name: 📊 Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, static-analysis, integration-tests]
    if: always()
    
    steps:
    - name: 📊 Check Quality Gate
      run: |
        echo "🔍 Quality Gate Results:"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Static Analysis: ${{ needs.static-analysis.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        
        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi
        
        echo "✅ Quality gate passed!"

  # 🚀 Performance Testing (on main branch only)
  performance-testing:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [quality-gate]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🏗️ Build Application
      run: ./mvnw clean package -DskipTests -B
    
    - name: 🐳 Start Application
      run: |
        docker-compose up -d
        java -jar target/quarkus-app/quarkus-run.jar &
        sleep 30
    
    - name: 📦 Setup K6
      uses: grafana/k6-action@v0.3.1
      with:
        filename: scripts/load-test-basic.js
    
    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-results.json
        retention-days: 30
